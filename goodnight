#!/bin/bash

##
# Main function
#
_goodnight () {
        local debug=false

        # arguments variables
        local action
        local -r stdout_default="log.out"
        local -r stderr_default="log.err"
        local -r stdin_default=/dev/null
        local -r wait_pid_sleep=60
        local stdout=$stdout_default
        local stderr=$stderr_default
        local stdin=$stdin_default
        local stderr_redirect=false
        local pid_to_wait=""

        # config variables
        local recipient
        local -r config_file="$HOME/.goodnightrc"

        # parse arguments and config
        _parse_args "$@"
        _read_config "$config_file"

        # select mail command
        local mail_command
        if command -v sendmail >/dev/null 2>&1
        then
                mail_command=_sendmail
                _debug "Select 'sendmail' for sending message"
        elif command -v mail >/dev/null 2>&1
        then
                mail_command=_mail
                _debug "Select 'mail' for sending message"
        else
                _error "Cannot find a mail command"
                exit 1
        fi

        # do stuff
        if $stderr_redirect
        then
                _do_action "$action" "$recipient" "$mail_command" >${stdout} 2>&1 <${stdin} &
        else
                _do_action "$action" "$recipient" "$mail_command" >${stdout} 2>${stderr} <${stdin} &
        fi

        # closing
        _debug "Exit successfuly"
}

##
# Read config file
#
_read_config () {
        _debug "Read config file"

        local config_file="$1"

        # if the config file does not exist
        if ! [[ -f $config_file ]]
        then
                _error "No config file"
                _help_config_file
                exit 1
        fi

        # if it exists, read it
        local key
        local value

        while IFS=" = " read key value
        do
                case $key in
                        recipient)
                                recipient="$value"
                                ;;
                        *) # error case
                                _error "Invalid key '${key}' in config file"
                                _help_config_file
                                exit 1
                esac
        done <$config_file

        if [[ -z $recipient ]]
        then
                _error "Recipient undefined in config file"
                _help_config_file
                exit 1
        fi

        _debug "Recipient: $recipient"
}

##
# Parse arguments
#
_parse_args () {
        local option

        while getopts ":o:e:Ei:w:dh" option
        do
                case $option in
                        o)
                                stdout=$OPTARG
                                ;;
                        e)
                                stderr=$OPTARG
                                ;;
                        E)
                                stderr_redirect=true
                                ;;
                        i)
                                stdin=$OPTARG
                                ;;
                        w)
                                pid_to_wait=$OPTARG
                                ;;
                        h)
                                _help_command_line
                                echo
                                _help_extra
                                echo
                                _help_config_file
                                exit 0
                                ;;
                        d)
                                debug=true
                                # we only know the debug flag at this step of the program
                                # so, we display the missed messages
                                _debug "This is Goodnight"
                                _debug "Parse command arguments"
                                ;;
                        *)
                                _error "Unknown option '${option}'"
                                _help_command_line
                                exit 1
                                ;;
                esac
        done

        shift $((OPTIND - 1))
        action="$@"

        if [[ -z $action ]]
        then
                _error "No action specified"
                _help_command_line
                exit 1
        fi

        if $stderr_redirect
        then
                stderr=$stdout
        fi

        _debug "Action: $action"
        _debug "stdin: $stdin, stdout: $stdout, stderr: $stderr"
}

##
# Print command line help
#
_help_command_line () {
        cat << EOF
goodnight [-o STDOUT] [-e STDERR | -E] [-i STDIN] [-w PID] [-h] [-d] COMMAND

Bash tool to launch a disowned command that'll kindly send you a message when
done. Like 'nohup my_command </dev/null >log 2>&1 &' but with a simpler
interface and some fancy features.

    COMMAND
        Command to launch, with its own arguments.
    -o STDOUT
        Where to redirect the standard output to.
        Default to '${stdout_default}'.
    -e STDERR
        Where to redirect the standard error to.
        Default to '${stderr_default}'.
    -E
        Redirect the standard error to the standard output.
        Do not set '-e' and '-E' at the same time.
    -i STDIN
        Where to redirect the standard input to.
        Default to '${stdin_default}'.
    -w PID
        Wait for another command to finish befaure launching the provided one.
        The command to wait is passed through its PID, which can be obtained
        with 'ps' or by the second column of 'ps aux | grep
        my_command_to_wait'.
        More details in the following paragraph.
    -h
        Show this help and exit.
    -d
        Active debug mode. Increase verbosity.
EOF
}

##
# Print config file help
#
_help_config_file () {
        cat << EOF
Goodnight config file: '${config_file}' (must be created by the user)

For now, the config file contains only one value: the address of the recipient.

    recipient=person@example.com
        Address where a mail is sent when the command has been finished.
EOF
}

##
# Print extra help
#
_help_extra () {
        cat << EOF
When invoking Goodnight with '-w', the command to wait must be running at the
time Goodnight is called. To chain a command to another one which has been
already invoked through 'goodnight -w some_other_command_pid', you can use this
command's Goodnight's PID. The PID can be obtained with 'ps' or 'pstree -p'.
Goodnight checks if the PID to wait exists every ${wait_pid_sleep} seconds.

Goodnight can send you a mail when the command is terminated, wether
successfuly or unsuccessfuly. It can use the 'sendmail' or the 'mail' command,
depending on what is available on the host. You have to provide a mail address
for this to work. This is set in the configuration file.
EOF
}

##
# Execute the nohuped action
#
_do_action () {
        trap "" HUP

        local action="$1"
        local recipient="$2"

        # wait for PID to finish
        if [[ $pid_to_wait != "" ]]
        then
                _wait_pid $pid_to_wait
        fi

        # initiate stdout stream
        echo "Script started at $(date -R)"

        # initiate stderr stream
        if ! $stderr_redirect
        then
                >&2 echo "Script started at $(date -R)"
        fi

        # create messages
        local subject
        local message
        local mail_command=$3
        local subject_success="[Goodnight] Success: ${action}"
        local message_success
        read -r -d '' message_success << EOF
Hey

Your command "${action}" executed in "$PWD" successfully ended on %s.

Goodnight
EOF

        local subject_failure="[Goodnight] Failure: ${action}"
        local message_failure
        read -r -d '' message_failure << EOF
Hey

Your command "${action}" executed in "$PWD" failed on %s.

Goodnight
EOF

        # execute action
        eval "$action"

        # select message according to the outdraw of the command
        if [[ $? == 0 ]] # success
        then
                subject="$subject_success"
                message="$message_success"
        else # failure
                subject="$subject_failure"
                message="$message_failure"
        fi

        # add date to message
        message="$(printf "$message" "$(date -R)")"

        # send message
        $mail_command "$subject" "$recipient" "$message"

        # close stdout stream
        echo "Script ended at $(date -R)"

        # close stderr stream
        if ! $stderr_redirect
        then
                >&2 echo "Script ended at $(date -R)"
        fi
}

##
# Wait for PID to be terminated
#
_wait_pid () {
        local pid=$1

        while /bin/ps -p $pid >/dev/null
        do
                sleep $wait_pid_sleep
        done
}

##
# Send mail with sendmail command
#
_sendmail () {
        local subject="$1"
        local recipient="$2"
        local text="$3"

        sendmail "$recipient" << EOF
Subject: $subject
To: $recipient
Date: $(date -R)

$text
EOF

}

##
# Send mail with mail command
#
_mail () {
        local subject="$1"
        local recipient="$2"
        local text="$3"

        mail -s "$subject" "$recipient" << EOF
$text
EOF

}

##
# Show debug line
#
_debug () {
        if $debug
        then
                >&2 echo "$(tput sgr 0)[$(tput setaf 6)DEBUG$(tput sgr 0)] $@"
        fi
}

##
# Show error line
#
_error () {
        >&2 echo "$(tput sgr 0; tput bold)[$(tput setaf 1)ERROR$(tput setaf 7)] $@$(tput sgr 0)"
}

##
# Show warning line
#
_warn () {
        >&2 echo "$(tput sgr 0)[$(tput setaf 3; tput bold)WARNING$(tput sgr 0)] $@"
}

_goodnight $@
